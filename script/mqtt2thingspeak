#!/bin/sh

USER="root"
APP_DIR="$(cd $(dirname $(readlink $0)); cd ..; pwd)"
NODE_APP='lib/mqtt2ts.js'
PID_DIR="$APP_DIR/pid"
PID_FILE="$PID_DIR/app.pid"
LOG_DIR="$APP_DIR/log"
LOG_FILE="$LOG_DIR/app.log"
NODE_EXEC=$(which node)

# app env params
_url='mqtt://localhost:1883'
# the thingspeak api key
_ts_key='YOUR_KEY'
_debug='app'

# node options
_node_opts='--harmony'

###############

# REDHAT chkconfig header

# chkconfig: - 58 74
# description: node-app is the script for starting a node app on boot.
### BEGIN INIT INFO
# Provides: node
# Required-Start:    $network $remote_fs $local_fs
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop node
# Description: Node process for app
### END INIT INFO

###############

USAGE="Usage: $0 {start|stop|restart|status} [--force]"
FORCE_OP=false

pid_file_exists() {
    [ -f "$PID_FILE" ]
}

get_pid() {
    echo "$(cat "$PID_FILE")"
}

is_running() {
    PID=$(get_pid)
    ! [ -z "$(ps aux | awk '{print $2}' | grep "^$PID$")" ]
}

logrotate_it() {
    local LOGROTATE='/etc/logrotate.d/mqtt2thingspeak'
    if [ -d /etc/logrotate.d ] && [ ! -f "${LOGROTATE}" ]; then
    cat <<EOF > "${LOGROTATE}"
LOG_DIR/*.* {
        daily
        compress
        rotate 30
        delaycompress
        copytruncate
        dateext
        olddir LOG_DIR/backup
}
EOF
    fi
}

start_it() {
    mkdir -p "$PID_DIR"
    chown ${USER}:${USER} "$PID_DIR"
    mkdir -p "$LOG_DIR"
    chown ${USER}:${USER} "$LOG_DIR"

    _env_vars=
    _env_vars="$_env_vars DEBUG=$_debug"
    _env_vars="$_env_vars MQTT_URL=$_url"
    _env_vars="$_env_vars TS_KEY=$_ts_key"

    echo "Starting node app ..."
    local SCRIPT="cd $APP_DIR && $_env_vars $NODE_EXEC $_node_opts $APP_DIR/$NODE_APP"
    local CMD="$SCRIPT &> \"$LOG_FILE\" & echo \$!"
    su -c "$CMD" ${USER} > "$PID_FILE"
    echo "Node app started with pid $(get_pid)"
}

stop_process() {
    local PID="$(get_pid)"
    local PGID="$(ps -o pgid --no-headers $PID)"
    echo "Killing all processes linked to PID $PID using PGID $PGID"
    kill -TERM "-${PGID}"
}

remove_pid_file() {
    echo "Removing pid file"
    rm -f "$PID_FILE"
}

start_app() {
    if pid_file_exists
    then
        if is_running
        then
            PID=$(get_pid)
            echo "Node app already running with pid $PID"
            exit 1
        else
            echo "Node app stopped, but pid file exists"
            if [ ${FORCE_OP} = true ]
            then
                echo "Forcing start anyways"
                remove_pid_file
                start_it
            fi
        fi
    else
        start_it
    fi
    logrotate_it
}

stop_app() {
    if pid_file_exists
    then
        if is_running
        then
            echo "Stopping node app ..."
            stop_process && \
            remove_pid_file
            echo "Node app stopped"
        else
            echo "Node app already stopped, but pid file exists"
            if [ ${FORCE_OP} = true ]
            then
                echo "Forcing stop anyways ..."
                remove_pid_file
                echo "Node app stopped"
            else
                exit 1
            fi
        fi
    else
        echo "Node app already stopped, pid file does not exist"
        exit 1
    fi
}

status_app() {
    if pid_file_exists
    then
        if is_running
        then
            PID=$(get_pid)
            echo "Node app running with pid $PID"
        else
            echo "Node app stopped, but pid file exists"
        fi
    else
        echo "Node app stopped"
    fi
}

case "$2" in
    --force)
        FORCE_OP=true
    ;;

    "")
    ;;

    *)
        echo ${USAGE}
        exit 1
    ;;
esac

case "$1" in
    start)
        start_app
    ;;

    stop)
        stop_app
    ;;

    restart)
        stop_app
        start_app
    ;;

    status)
        status_app
    ;;

    *)
        echo ${USAGE}
        exit 1
    ;;
esac
